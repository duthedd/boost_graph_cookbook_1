#include <cassert>
#include <string>
#include <sstream>
#include <stdexcept>
#include <boost/graph/adjacency_list.hpp>
#include "has_vertex_with_my_vertex.h"
#include "find_first_custom_vertex_with_my_vertex.h"

template <typename graph, typename custom_vertex>
typename boost::graph_traits<graph>::edge_descriptor
add_edge_between_custom_vertices(
  const custom_vertex& vertex_from,
  const custom_vertex& vertex_to,
  graph& g
)
{
  if (!has_vertex_with_my_vertex(vertex_from, g))
  {
    std::stringstream msg;
    msg << __func__ << ": "
      << "could not find vertex with my_vertex 'from' with value '"
      << vertex_from << "'"
    ;
    throw std::invalid_argument(msg.str());
  }
  if (!has_vertex_with_my_vertex(vertex_to, g))
  {
    std::stringstream msg;
    msg << __func__ << ": "
      << "could not find vertex with my_vertex 'to' with value '"
      << vertex_to << "'"
    ;
    throw std::invalid_argument(msg.str());
  }
  const auto vd_1 = find_first_custom_vertex_with_my_vertex(vertex_from, g);
  const auto vd_2 = find_first_custom_vertex_with_my_vertex(vertex_to, g);
  if (edge(vd_1, vd_2, g).second)
  {
    std::stringstream msg;
    msg << __func__ << ": edge is already present";
    throw std::invalid_argument(msg.str());
  }

  const auto aer = boost::add_edge(vd_1, vd_2, g);
  assert(aer.second);
  return aer.first;
}
