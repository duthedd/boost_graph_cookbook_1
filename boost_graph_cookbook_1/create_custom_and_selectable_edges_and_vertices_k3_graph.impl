#include "add_custom_and_selectable_edge_between_vertices.h"
#include "add_custom_and_selectable_vertex.h"
#include "create_empty_undirected_custom_and_selectable_edges_and_vertices_graph.h"

boost::adjacency_list<boost::vecS, boost::vecS, boost::undirectedS,
  boost::property<boost::vertex_custom_type_t, my_custom_vertex,
    boost::property<boost::vertex_is_selected_t, bool>>,
  boost::property<boost::edge_custom_type_t, my_custom_edge,
    boost::property<boost::edge_is_selected_t, bool>>>
create_custom_and_selectable_edges_and_vertices_k3_graph()
{
  auto g
    = create_empty_undirected_custom_and_selectable_edges_and_vertices_graph();
  const my_custom_vertex va("Karen", "red", 1.1, 2.2);
  const my_custom_vertex vb("Kristel", "black", 3.3, 4.4);
  const my_custom_vertex vc("Kathleen", "blond", 5.5, 6.6);
  const my_custom_edge ea("1");
  const my_custom_edge eb("2");
  const my_custom_edge ec("3");
  const auto vd_a = add_custom_and_selectable_vertex(va, true, g);
  const auto vd_b = add_custom_and_selectable_vertex(vb, false, g);
  const auto vd_c = add_custom_and_selectable_vertex(vc, false, g);
  add_custom_and_selectable_edge_between_vertices(ea, false, vd_a, vd_b, g);
  add_custom_and_selectable_edge_between_vertices(eb, false, vd_b, vd_c, g);
  add_custom_and_selectable_edge_between_vertices(ec, false, vd_c, vd_a, g);
  return g;
}
