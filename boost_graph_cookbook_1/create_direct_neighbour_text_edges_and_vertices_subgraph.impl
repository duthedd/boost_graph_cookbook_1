#include <map>
#include <boost/graph/adjacency_list.hpp>
#include "add_text_edge_between_vertices.h"
#include "add_text_vertex.h"
#include "get_edge_text.h"
#include "get_vertex_text.h"

template <typename graph>
graph create_direct_neighbour_text_edges_and_vertices_subgraph(
  const typename boost::graph_traits<graph>::vertex_descriptor& vd,
  const graph& g
)
{
  using vertex_descriptor = typename boost::graph_traits<graph>::vertex_descriptor;
  graph h;

  std::map<vertex_descriptor,vertex_descriptor> vds;
  {
    const auto vd_h = add_text_vertex(get_vertex_text(vd,g),h);
    vds.insert(std::make_pair(vd,vd_h));
  }
  //Copy vertices
  {
    const auto vdsi = boost::adjacent_vertices(vd, g);
    std::transform(vdsi.first, vdsi.second,
      std::inserter(vds,std::begin(vds)),
      [&g, &h](const vertex_descriptor& d)
      {
        const auto vd_h = add_text_vertex(get_vertex_text(d,g), h);
        return std::make_pair(d,vd_h);
      }
    );
  }
  //Copy edges
  {
    const auto eip = edges(g);
    const auto j = eip.second;
    for (auto i = eip.first; i!=j; ++i)
    {
      const auto vd_from = source(*i, g);
      const auto vd_to = target(*i, g);
      if (vds.find(vd_from) == std::end(vds)) continue;
      if (vds.find(vd_to) == std::end(vds)) continue;
      add_text_edge_between_vertices(
        get_edge_text(*i, g),
        vds[vd_from],vds[vd_to], h
      );
    }
  }
  return h;
}
