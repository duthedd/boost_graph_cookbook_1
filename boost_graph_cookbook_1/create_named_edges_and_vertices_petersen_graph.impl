#include "add_named_edge_between_vertices.h"
#include "add_named_vertex.h"
#include "create_empty_undirected_named_edges_and_vertices_graph.h"
#include <cassert>
#include <vector>

boost::adjacency_list<boost::vecS, boost::vecS, boost::undirectedS,
  boost::property<boost::vertex_name_t, std::string>,
  boost::property<boost::edge_name_t, std::string>>
create_named_edges_and_vertices_petersen_graph()
{
  auto g = create_empty_undirected_named_edges_and_vertices_graph();
  using vd
    = decltype(create_empty_undirected_named_edges_and_vertices_graph())::
      vertex_descriptor;

  std::vector<vd> v; // Outer
  for (int i = 0; i != 5; ++i) {
    v.push_back(add_named_vertex(std::string(1, 'A' + i), g));
  }
  std::vector<vd> w; // Inner
  for (int i = 0; i != 5; ++i) {
    w.push_back(add_named_vertex(std::string(1, 'a' + i), g));
  }
  // Outer ring
  for (int i = 0; i != 5; ++i) {
    const std::string name(1, 'F' + i);
    add_named_edge_between_vertices(name, v[i], v[(i + 1) % 5], g);
  }
  // Spoke
  for (int i = 0; i != 5; ++i) {
    const std::string name(1, '0' + i);
    add_named_edge_between_vertices(name, v[i], w[i], g);
  }
  // Inner pentagram
  for (int i = 0; i != 5; ++i) {
    const std::string name(1, 'f' + i);
    add_named_edge_between_vertices(name, w[i], w[(i + 2) % 5], g);
  }
  return g;
}
