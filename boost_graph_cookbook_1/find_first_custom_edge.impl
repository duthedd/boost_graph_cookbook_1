#include "install_edge_custom_type.h"
#include "my_custom_edge.h"
#include <boost/graph/graph_traits.hpp>
#include <cassert>

/// @param predicate a function that returns a boolean,
///   and takes a custom edge as an argument
template <typename graph, typename predicate>
typename boost::graph_traits<graph>::edge_descriptor find_first_custom_edge(
  const predicate& p, const graph& g)
{
  using ed = typename boost::graph_traits<graph>::edge_descriptor;
  const auto eip = edges(g);
  const auto i = std::find_if(eip.first, eip.second, [&g, &p](const ed d) {
    const auto my_edges_map = get(boost::edge_custom_type, g);
    const auto edge = get(my_edges_map, d);
    return p(edge);
  });
  if (i == eip.second) {
    std::stringstream msg;
    msg << __func__ << ": "
        << "could not find a custom_edge satisfying the predicate";
    throw std::invalid_argument(msg.str());
  }
  return *i;
}
