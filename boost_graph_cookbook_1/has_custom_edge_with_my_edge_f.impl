#ifdef I_THINK_ONE_SHOULD_NOT_USE_has_custom_edge_INSTEAD
#include <boost/graph/properties.hpp>
#include "install_edge_custom_type.h"
#include "my_custom_edge.h"

template <typename graph, typename custom_edge, typename function>
bool has_custom_edge_with_my_edge(
  const custom_edge& e,
  const graph& g,
  const function& compare_for_equivalence_function
) noexcept
{
  using ed = typename boost::graph_traits<graph>::edge_descriptor;
  const auto eip = edges(g);
  return std::find_if(eip.first, eip.second,
    [&e, &g, &compare_for_equivalence_function](const ed& d)
    {
      const auto my_edges_map
        = get(boost::edge_custom_type,g);
      return compare_for_equivalence_function(get(my_edges_map, d), e);
    }
  ) != eip.second;
}
#endif //I_THINK_ONE_SHOULD_NOT_USE_has_custom_edge_INSTEAD
